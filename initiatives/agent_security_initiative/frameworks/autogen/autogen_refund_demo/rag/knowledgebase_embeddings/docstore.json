{"docstore/metadata": {"4afe1035-776e-453e-8af4-19e15f49b28c": {"doc_hash": "fe4ab32ed8b42a288db52dce7c3049f316d5db976fa2fa4a11f47d7015923332"}, "6a5fd3ab-c153-4d16-90ee-a0c019381b70": {"doc_hash": "7764f8b19a86d04619be6fe41c357a1ca929b8184a9e3ada76a6f42956c1d240"}, "0410bac5-0f3a-4a98-8b9c-a9f400837737": {"doc_hash": "a86f3183785f2a6e4de645b2564f755b9e9cface62479068e5b2800c33dea9b3", "ref_doc_id": "4afe1035-776e-453e-8af4-19e15f49b28c"}, "36b1a982-d77e-43af-8a01-931607513545": {"doc_hash": "b739f339008caccca871f4652a5221d0e36b21e815c1a0522111e56c54670f83", "ref_doc_id": "6a5fd3ab-c153-4d16-90ee-a0c019381b70"}}, "docstore/data": {"0410bac5-0f3a-4a98-8b9c-a9f400837737": {"__data__": {"id_": "0410bac5-0f3a-4a98-8b9c-a9f400837737", "embedding": null, "metadata": {"file_path": "C:\\Users\\vkuta\\projects\\owasp-asi-insecure-code-samples\\frameworks\\autogen\\autogen_refund_demo\\rag\\knowledgebase.py", "file_name": "knowledgebase.py", "file_type": "text/x-python", "file_size": 2809, "creation_date": "2025-01-04", "last_modified_date": "2025-01-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4afe1035-776e-453e-8af4-19e15f49b28c", "node_type": "4", "metadata": {"file_path": "C:\\Users\\vkuta\\projects\\owasp-asi-insecure-code-samples\\frameworks\\autogen\\autogen_refund_demo\\rag\\knowledgebase.py", "file_name": "knowledgebase.py", "file_type": "text/x-python", "file_size": 2809, "creation_date": "2025-01-04", "last_modified_date": "2025-01-04"}, "hash": "fe4ab32ed8b42a288db52dce7c3049f316d5db976fa2fa4a11f47d7015923332", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "import os\r\nfrom llama_index.core  import VectorStoreIndex, SimpleDirectoryReader, StorageContext, load_index_from_storage\r\nfrom llama_index.embeddings.openai import OpenAIEmbedding\r\n\r\nclass RetrieverAugmenter:\r\n    def __init__(self, data_dir=None, persist_dir=None):\r\n        \"\"\"\r\n        Initialize the RetrieverAugmenter with data and embedding directories.\r\n        \"\"\"\r\n        base_dir = os.path.dirname(__file__)  # Path of `knowledgebase.py`\r\n        self.data_dir = data_dir or os.path.join(base_dir, \"policy.txt\")  # Default to `policy.txt`\r\n        self.persist_dir = persist_dir or os.path.join(base_dir, \"knowledgebase_embeddings\")  # Embedding storage\r\n        self.index = None\r\n\r\n    def load_documents(self):\r\n        \"\"\"\r\n        Load documents from the knowledgebase and build or load the embedding index.\r\n        \"\"\"\r\n        # Check if it's a single file or a directory\r\n        if os.path.isfile(self.data_dir):\r\n            # Read a single file\r\n            with open(self.data_dir, \"r\") as file:\r\n                content = file.read()\r\n            documents = [{\"content\": content}]\r\n        elif os.path.isdir(self.data_dir):\r\n            # Read all documents in the directory\r\n            documents = SimpleDirectoryReader(self.data_dir).load_data()\r\n        else:\r\n            raise FileNotFoundError(f\"Invalid data source: {self.data_dir}\")\r\n\r\n        self.build_index(documents)\r\n\r\n    def build_index(self, documents):\r\n        embedding_model = OpenAIEmbedding(model=\"text-embedding-ada-002\")  # Explicitly set model\r\n        print(f\"Using embedding model: {embedding_model.model_name}\")\r\n\r\n        if not os.path.exists(self.persist_dir):\r\n            print(\"Building a new embedding index...\")\r\n            self.index = VectorStoreIndex.from_documents(\r\n                documents,\r\n                embed_model=embedding_model,  # Pass the embedding model\r\n                show_progress=True,\r\n            )\r\n            print(\"Embedding generation completed.\")\r\n            self.index.storage_context.persist(self.persist_dir)\r\n            print(f\"Index persisted to: {self.persist_dir}\")\r\n        else:\r\n            print(\"Loading existing embedding index...\")\r\n            storage_context = StorageContext.from_defaults(persist_dir=self.persist_dir)\r\n            self.index = load_index_from_storage(storage_context)\r\n\r\n    def query(self, prompt):\r\n        \"\"\"\r\n        Query the embedding index for a response.\r\n        \"\"\"\r\n        if not self.index:\r\n            raise ValueError(\"Index is not initialized. Call `load_documents` first.\")\r\n\r\n        # Create a query engine and run the query\r\n        query_engine = self.index.as_query_engine()\r\n        response = query_engine.query(prompt)\r\n        return response.response  # Extract and return the response content", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2807, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "36b1a982-d77e-43af-8a01-931607513545": {"__data__": {"id_": "36b1a982-d77e-43af-8a01-931607513545", "embedding": null, "metadata": {"file_path": "C:\\Users\\vkuta\\projects\\owasp-asi-insecure-code-samples\\frameworks\\autogen\\autogen_refund_demo\\rag\\policy.txt", "file_name": "policy.txt", "file_type": "text/plain", "file_size": 163, "creation_date": "2025-01-04", "last_modified_date": "2025-01-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6a5fd3ab-c153-4d16-90ee-a0c019381b70", "node_type": "4", "metadata": {"file_path": "C:\\Users\\vkuta\\projects\\owasp-asi-insecure-code-samples\\frameworks\\autogen\\autogen_refund_demo\\rag\\policy.txt", "file_name": "policy.txt", "file_type": "text/plain", "file_size": 163, "creation_date": "2025-01-04", "last_modified_date": "2025-01-04"}, "hash": "7764f8b19a86d04619be6fe41c357a1ca929b8184a9e3ada76a6f42956c1d240", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\"Our refund policy states any orders older than 30 days are not eligible for refunds unless it's a special exception. Refunds must not exceed the purchase amount.\"", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 163, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"4afe1035-776e-453e-8af4-19e15f49b28c": {"node_ids": ["0410bac5-0f3a-4a98-8b9c-a9f400837737"], "metadata": {"file_path": "C:\\Users\\vkuta\\projects\\owasp-asi-insecure-code-samples\\frameworks\\autogen\\autogen_refund_demo\\rag\\knowledgebase.py", "file_name": "knowledgebase.py", "file_type": "text/x-python", "file_size": 2809, "creation_date": "2025-01-04", "last_modified_date": "2025-01-04"}}, "6a5fd3ab-c153-4d16-90ee-a0c019381b70": {"node_ids": ["36b1a982-d77e-43af-8a01-931607513545"], "metadata": {"file_path": "C:\\Users\\vkuta\\projects\\owasp-asi-insecure-code-samples\\frameworks\\autogen\\autogen_refund_demo\\rag\\policy.txt", "file_name": "policy.txt", "file_type": "text/plain", "file_size": 163, "creation_date": "2025-01-04", "last_modified_date": "2025-01-04"}}}}